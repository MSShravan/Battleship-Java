/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.sm952.battleship;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.ResourceAccessMode;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;

import java.io.*;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
    void test_main_B_wins() throws IOException {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);

        InputStream input = getClass().getClassLoader().getResourceAsStream("input_B_wins.txt");
        assertNotNull(input);

        InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("output_B_wins.txt");
        assertNotNull(expectedStream);

        InputStream oldIn = System.in;
        PrintStream oldOut = System.out;

        try {
            System.setIn(input);
            System.setOut(out);
            App.main(new String[0]);
        } finally {
            System.setIn(oldIn);
            System.setOut(oldOut);
        }

        String expected = new String(expectedStream.readAllBytes());
        String actual = bytes.toString();
        assertEquals(expected, actual);

    }

    @Test
    @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
    void test_main_c_vs_c() throws IOException {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);

        InputStream input = getClass().getClassLoader().getResourceAsStream("input_comp.txt");
        assertNotNull(input);

        InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("output_comp.txt");
        assertNotNull(expectedStream);

        InputStream oldIn = System.in;
        PrintStream oldOut = System.out;

        try {
            System.setIn(input);
            System.setOut(out);
            App.main(new String[0]);
        } finally {
            System.setIn(oldIn);
            System.setOut(oldOut);
        }

        String expected = new String(expectedStream.readAllBytes());
        String actual = bytes.toString();
        assertEquals(expected, actual);

    }

    @Test
    @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
    void test_main_A_vs_c() throws IOException {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);

        InputStream input = getClass().getClassLoader().getResourceAsStream("input_a_vs_c.txt");
        assertNotNull(input);

        InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("output_a_vs_c.txt");
        assertNotNull(expectedStream);

        InputStream oldIn = System.in;
        PrintStream oldOut = System.out;

        try {
            System.setIn(input);
            System.setOut(out);
            App.main(new String[0]);
        } finally {
            System.setIn(oldIn);
            System.setOut(oldOut);
        }

        String expected = new String(expectedStream.readAllBytes());
        String actual = bytes.toString();
        assertEquals(expected, actual);

    }

    @Test
    @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
    void test_main_c_vs_B() throws IOException {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);

        InputStream input = getClass().getClassLoader().getResourceAsStream("input_c_vs_b.txt");
        assertNotNull(input);

        InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("output_c_vs_b.txt");
        assertNotNull(expectedStream);

        InputStream oldIn = System.in;
        PrintStream oldOut = System.out;

        try {
            System.setIn(input);
            System.setOut(out);
            App.main(new String[0]);
        } finally {
            System.setIn(oldIn);
            System.setOut(oldOut);
        }

        String expected = new String(expectedStream.readAllBytes());
        String actual = bytes.toString();
        assertEquals(expected, actual);

    }

    @Test
    public void testIsGameOver() {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);

        PrintStream oldOut = System.out;

        try {
            Board<Character> b1 = new BattleShipBoard<Character>(10, 20, 'X');
            Coordinate c = new Coordinate(1, 1);
            Ship<Character> ship1 = new RectangleShip<>(c, 's', '*');
            b1.tryAddShip(ship1);
            Board<Character> b2 = new BattleShipBoard<Character>(10, 20, 'X');
            Ship<Character> ship2 = new RectangleShip<>(c, 's', '*');
            b2.tryAddShip(ship2);
            BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
            V1ShipFactory factory = new V1ShipFactory();
            TextPlayer p1 = new TextPlayer("A", b1, input, System.out, factory);
            TextPlayer p2 = new TextPlayer("B", b2, input, System.out, factory);
            System.setOut(out);
            App app = new App(p1, p2);
            assertFalse(app.isGameOver(b1, "B", out));
            assertEquals("", bytes.toString());
            assertFalse(app.isGameOver(b2, "A", out));
            assertEquals("", bytes.toString());
            b1.fireAt(c);
            assertTrue(app.isGameOver(b1, "B", out));
            assertEquals("Player B WINS!\n", bytes.toString());
            bytes.reset();
            b2.fireAt(c);
            assertTrue(app.isGameOver(b2, "A", out));
            assertEquals("Player A WINS!\n", bytes.toString());
        } finally {
            System.setOut(oldOut);
        }
    }

    @Test
    void test_preparePlayer() {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);

        PrintStream oldOut = System.out;

        try {
            Board<Character> b1 = new BattleShipBoard<Character>(10, 20, 'X');
            Coordinate c = new Coordinate(1, 1);
            Ship<Character> ship1 = new RectangleShip<>(c, 's', '*');
            b1.tryAddShip(ship1);
            Board<Character> b2 = new BattleShipBoard<Character>(10, 20, 'X');
            Ship<Character> ship2 = new RectangleShip<>(c, 's', '*');
            b2.tryAddShip(ship2);
            BufferedReader input = new BufferedReader(new StringReader(""));
            V1ShipFactory factory = new V1ShipFactory();
            TextPlayer p1 = new TextPlayer("A", b1, input, System.out, factory);
            TextPlayer p2 = new TextPlayer("B", b2, input, System.out, factory);
            System.setOut(out);
            App app = new App(p1, p2);
            assertThrows(EOFException.class, () -> app.preparePlayer(p1, input, out));
        } finally {
            System.setOut(oldOut);
        }
    }

}
