/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.sm952.battleship;

import java.io.*;

public class App {

    /**
     * The text player 1
     */
    TextPlayer player1;

    /**
     * The text player 2
     */
    TextPlayer player2;

    /**
     * Constructs the App with below params
     *
     * @param player1 first player of the game
     * @param player2 second player of the game
     */
    public App(TextPlayer player1, TextPlayer player2) {
        this.player1 = player1;
        this.player2 = player2;
    }


    /**
     * The Main method
     *
     * @param args is ignored
     */
    public static void main(String[] args) throws IOException {
        Board<Character> b1 = new BattleShipBoard<Character>(10, 20, 'X');
        Board<Character> b2 = new BattleShipBoard<Character>(10, 20, 'X');
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        V2ShipFactory factory = new V2ShipFactory();

        PrintStream out = System.out;
        String player1Name = "A";
        String player2Name = "B";

        TextPlayer p1 = new TextPlayer(player1Name, b1, input, out, factory);
        TextPlayer p2 = new TextPlayer(player2Name, b2, input, out, factory);

        App app = new App(p1, p2);
        app.preparePlayer(p1, input, out);
        app.preparePlayer(p2, input, out);
        app.doPlacementPhase();
        app.doAttackingPhase(b1, b2, player1Name, player2Name, out);
    }

    /**
     * method to prepare player as human or computer
     *
     * @param p     player
     * @param input input stream
     * @param out   output stream
     */
    protected void preparePlayer(TextPlayer p, BufferedReader input, PrintStream out) throws IOException {
        out.println("Is Player " + p.name + " a computer? Type y or n");
        while (true) {
            String s = input.readLine();
            if (s == null) throw new EOFException();
            else if (s.length() == 1 && (s.charAt(0) == 'y' || s.charAt(0) == 'n')) {
                if (s.charAt(0) == 'y')
                    p.preparePlayerAsComp();
                return;
            }
            out.println("Invalid input! Type y or n");
        }
    }


    /**
     * method to do ship placements
     */
    private void doPlacementPhase() throws IOException {
        player1.doPlacementPhase();
        player2.doPlacementPhase();
    }

    /**
     * method to attack and players to take turns
     *
     * @param b1     player 1 board
     * @param b2     player 2 board
     * @param p1Name player 1 name
     * @param p2Name player 2 name
     * @param out    output stream
     */
    private void doAttackingPhase(Board<Character> b1, Board<Character> b2, String p1Name, String p2Name, PrintStream out) throws IOException {
        BoardTextView p1View = new BoardTextView(b1);
        BoardTextView p2View = new BoardTextView(b2);
        while (true) {
            player1.playOneTurnV2(b2, p2View, p2Name);
            if (isGameOver(b2, p1Name, out)) return;
            player2.playOneTurnV2(b1, p1View, p1Name);
            if (isGameOver(b1, p2Name, out)) return;
        }
    }

    /**
     * Game over if all the ships are sunk for a player, opponent wins
     *
     * @param enemyBoard the enemy's board
     * @param name       name of the player
     * @param out        the output stream
     */
    protected boolean isGameOver(Board<Character> enemyBoard, String name, PrintStream out) {
        if (enemyBoard.hasAllShipsSunk()) {
            out.println("Player " + name + " WINS!");
            return true;
        }
        return false;
    }
}
